import sys
import scipy
import numpy
import matplotlib
import pandas
import sklearn
import psycopg2

#Connection
conn = psycopg2.connect(database="Spooky",
                        host="picklebet",
                        user="wketelaas",
                        password="Super Spooky",
                        port="5432")
cursor = conn.cursor()
cursor.execute("SELECT channel_type, a.date Betdate, a.odds BetOdds, c.odds Marketodds, stake, payout
	FROM standard.bets a
	LEFT JOIN standard.users b ON user_id = a.user_id
	LEFT JOIN standard.outcomes c on c.id = a.outcome_id
	WHERE c.Win = TRUE
LIMIT 10;")

# Load dataset
names = ['channel_type', 'BetOdds', 'MarketOdds', 'payout', 'stake']
dataset = (names=names)
# shape
print(dataset.shape)
# head
print(dataset.head(20))
# descriptions
print(dataset.describe())
# class distribution
print(dataset.groupby('class').size())


# compare algorithms
from  import cursor
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# Split-out validation dataset
array = dataset.values
X = array[:,0:4]
y = array[:,4]
X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1, shuffle=True)
# Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

# evaluate each model in turn
results = []
names = []
for name, model in models:
 kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
 cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
 results.append(cv_results)
 names.append(name)
 print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))

# Compare Algorithms
plt.boxplot(results, labels=names)
plt.title('Algorithm Comparison')
plt.show()
conn.close()
